#!/bin/bash
set -e -o pipefail
export LC_ALL=C


TPM_ID_INDEX="0x517562"


usage() {
    cat <<EOF
Prints a 20-byte hex string TPM ID followed by a newline.

Usage: tpm_id [-c]
    -c     (re-)create and print TPM ID (requires TPM owner password)
EOF
    exit 1
}

log() {
    echo "${0##*/}: $1" >&2
}

create() {
    # destroy existing NVRAM area
    if tpm_nvinfo -i "$TPM_ID_INDEX" | grep -q "WRITEDEFINE"; then
        log "Deleting existing TPM ID NVRAM area."
        tpm_nvrelease -i "$TPM_ID_INDEX" --pwdo
    fi

    # create a new 20-byte write-once NVRAM area
    log "Creating new TPM ID NVRAM area."
    tpm_nvdefine -i "$TPM_ID_INDEX" -s 20 -p "WRITEDEFINE|WRITEALL" --pwdo

    # generate a random TPM ID
    local tmp
    tmp=$(mktemp)
    head -c 20 /dev/random > "$tmp"

    # write the ID into TPM NVRAM
    tpm_nvwrite -i "$TPM_ID_INDEX" -s 20 -f "$tmp"

    # delete temp file with ID
    rm -f "$tmp"

    # lock the area to prevent non-owners from changing ID
    tpm_nvwrite -i "$TPM_ID_INDEX" -s 0
}

getid() {
    if ! tpm_nvinfo -i "$TPM_ID_INDEX" | grep -q "WRITEDEFINE"; then
        log "TPM NVRAM area at index $TPM_ID_INDEX is not defined!"
        log "Hint: did you run 'anti-evil-maid-install' or 'tpm_id -c'?"
        return 1
    fi

    tpm_nvread -i "$TPM_ID_INDEX" -f /dev/stderr 2>&1 1>/dev/null \
        | od -A n -v -t x1 \
        | tr -d ' \n'
    echo
}


while getopts cd opt; do
    case "$opt" in
        c) create ;;
        *) usage ;;
    esac
done

getid
